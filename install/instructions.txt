Neclib installation instructions

1. Requirements
Ikarus
LeGo 2.x with bars component (for Levitation spell)


2. Installation 

2.1 General
Extract the neclib.zip at a temporary folder. After extracting you will have three folders
	_work
	System
	Levitation
	Telekinesis
Move '_work' and 'System' folder to your Gothic II installation root folder.
In a clean Gothic 2 installation with installed modkit there won't be any file conflicts.
Assure that you do not overwrite any files of yours.

Open the file _work/data/Scripts/Content/Gothic.src
	add after LeGo/Header.src (if you don't use LeGo after Ikarus related files)
		Nec\Header.src

2.2. Levitation installation instructions

If you don't use that module you can skip this section.

Copy the content of the 'extracted neclib.zip'/Levitation/Anims/_compiled folder to _work/data/Anims/_compiled 
Copy the content of the 'extracted neclib.zip'/Levitation/Anims/Levitation folder to _work/data/Anims/Levitation
Copy Spell_Levitation.d from 'extracted neclib.zip'/Levitation/Spells to _work/data/Scripts/Content/AI/Magic/Spells

Open _work/data/Scripts/Content/_intern/Constants.d :
	Increase MAX_SPELL by one
	Define a new integer contant SPL_Telekinesis and give it the value of the highest defined SPL_* constant plus one;
	In a clean gothic installation it would look as followed now:
	
		...
		const int SPL_Reserved_99			= 99;
		const int SPL_Telekinesis			= 100;
		
		const int MAX_SPELL					= 101;
		
	To the end of the array spellFxInstanceNames add a new entry:

		"Transform"
		
	To th end of the array spellFxAniLetters add a new entry:
		
		"SUM"
		
Open _work/data/Scripts/Content/AI/Magic/Spell_ProcessMana.d:
	Add the following to the function Spell_ProcessMana:
		if (activeSpell == SPL_Levitation				)	{	return	Spell_Logic_Levitation	(manaInvested);	};
		
		
Open the file 'extracted neclib.zip'/Levitation/IT_Runen-add.d and copy the content to the file _work/data/Scripts/Content/Items/IT_Runen.d
Open the file 'extracted neclib.zip'/Levitation/IT_Scrolls-add.d and copy the content to the file _work/data/Scripts/Content/Items/IT_Scrolls.d

Open the file _work/data/Scripts/Content/Story/Text.d:
	add
		const string NAME_SPL_Levitation			= "Levitation";
		
	add to the end of the array TXT_SPELLS
		"Levitation"
		
		
Open the file 'extracted neclib.zip'/Levitation/VisualFxInst-add.d and copy the content to the file _work/data/Scripts/System/VisualFX/VisualFxInst.d	
			

The levitation spell should be fully funcional, now. Fell free to change the spell to your liking.
			


2.3. Telekinesis installation instructions

If you don't use that module you can skip this section.



3. Library initialization


neclib is a dynamic linked runtime library (dll) and thus has to be loaded, before it can be used.
It is important that the library gets loaded and initialized before a new game is started/ a savegame is loaded.
A suitable place for initialization is the main menu and thus the function InitPerceptions() located in Content/AI/AI_intern/Perception.d
can be leveraged.
Ikarus has to be loaded before, so call
MEM_InitAll();

at first.

After that you can initialize neclib by calling 
NEC_InitPerceptions(my-flags);

'my-flags' is a collection of modules you want to use from neclib (similar to LeGo initialization).
The following flags are supported:

NEC_DII			// Dynamic Item Instances (DII) module
NEC_LEVITATION	// Levitation spell module
NEC_TELEKINESIS	// Telekinesis spell module

So if you want to use DII and Levitation you would call 

NEC_InitPerceptions(NEC_DII | NEC_LEVITATION);

With 

NEC_InitPerceptions(NEC_ALL);

you can initializes all modules conveniently. That is equivalent to writing

NEC_InitPerceptions(NEC_DII | NEC_LEVITATION | NEC_TELEKINESIS);


Some modules need initialization in INIT_Global (located at Content/Story/Startup.d)after you have initialized Ikarus and Lego.

For that call

NEC_INIT_GLOBAL();


4. Finished

You're done! Have fun :)
